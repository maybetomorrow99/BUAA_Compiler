token 1   :CONST   const at line 1
token 2   :INT     int   at line 1
token 3   :ID      max_num at line 1
token 4   :EQU     =     at line 1
token 5   :NUM     1024  at line 1
token 6   :SEMI    ;     at line 1
token 7   :INT     int   at line 3
token 8   :ID      factorial at line 3
token 9   :LPAR    (     at line 3
token 10  :INT     int   at line 3
token 11  :ID      n     at line 3
token 12  :RPAR    )     at line 3
token 13  :LBRA    {     at line 3
token 14  :IF      if    at line 4
token 15  :LPAR    (     at line 4
token 16  :ID      n     at line 4
token 17  :LEQ     <=    at line 4
token 18  :NUM     1     at line 4
token 19  :RPAR    )     at line 4
token 20  :RETURN  return at line 5
token 21  :LPAR    (     at line 5
token 22  :NUM     1     at line 5
token 23  :RPAR    )     at line 5
token 24  :SEMI    ;     at line 5
token 25  :ELSE    else  at line 6
token 26  :RETURN  return at line 7
token 27  :LPAR    (     at line 7
token 28  :ID      n     at line 7
token 29  :MULT    *     at line 7
token 30  :ID      factorial at line 7
token 31  :LPAR    (     at line 7
token 32  :ID      n     at line 7
token 33  :MINUS   -     at line 7
token 34  :NUM     1     at line 7
token 35  :RPAR    )     at line 7
token 36  :RPAR    )     at line 7
token 37  :SEMI    ;     at line 7
token 38  :RBRA    }     at line 8
token 39  :INT     int   at line 10
token 40  :ID      mod   at line 10
token 41  :LPAR    (     at line 10
token 42  :INT     int   at line 10
token 43  :ID      x     at line 10
token 44  :COMMA   ,     at line 10
token 45  :INT     int   at line 10
token 46  :ID      y     at line 10
token 47  :RPAR    )     at line 10
token 48  :LBRA    {     at line 10
token 49  :ID      x     at line 11
token 50  :EQU     =     at line 11
token 51  :ID      x     at line 11
token 52  :MINUS   -     at line 11
token 53  :ID      x     at line 11
token 54  :DIV     /     at line 11
token 55  :ID      y     at line 11
token 56  :MULT    *     at line 11
token 57  :ID      y     at line 11
token 58  :SEMI    ;     at line 11
token 59  :RETURN  return at line 13
token 60  :LPAR    (     at line 13
token 61  :ID      x     at line 13
token 62  :RPAR    )     at line 13
token 63  :SEMI    ;     at line 13
token 64  :RBRA    }     at line 14
token 65  :VOID    void  at line 16
token 66  :ID      swap  at line 16
token 67  :LPAR    (     at line 16
token 68  :INT     int   at line 16
token 69  :ID      x     at line 16
token 70  :COMMA   ,     at line 16
token 71  :INT     int   at line 16
token 72  :ID      y     at line 16
token 73  :RPAR    )     at line 16
token 74  :LBRA    {     at line 16
token 75  :INT     int   at line 17
token 76  :ID      temp  at line 17
token 77  :SEMI    ;     at line 17
token 78  :PRINTF  printf at line 19
token 79  :LPAR    (     at line 19
token 80  :STRING  " x = " at line 19
token 81  :COMMA   ,     at line 19
token 82  :ID      x     at line 19
token 83  :RPAR    )     at line 19
token 84  :SEMI    ;     at line 19
token 85  :PRINTF  printf at line 20
token 86  :LPAR    (     at line 20
token 87  :STRING  " y = " at line 20
token 88  :COMMA   ,     at line 20
token 89  :ID      y     at line 20
token 90  :RPAR    )     at line 20
token 91  :SEMI    ;     at line 20
token 92  :ID      temp  at line 21
token 93  :EQU     =     at line 21
token 94  :ID      x     at line 21
token 95  :SEMI    ;     at line 21
token 96  :ID      x     at line 22
token 97  :EQU     =     at line 22
token 98  :ID      y     at line 22
token 99  :SEMI    ;     at line 22
token 100 :ID      y     at line 23
token 101 :EQU     =     at line 23
token 102 :ID      temp  at line 23
token 103 :SEMI    ;     at line 23
token 104 :PRINTF  printf at line 24
token 105 :LPAR    (     at line 24
token 106 :STRING  " SWAP x = " at line 24
token 107 :COMMA   ,     at line 24
token 108 :ID      x     at line 24
token 109 :RPAR    )     at line 24
token 110 :SEMI    ;     at line 24
token 111 :PRINTF  printf at line 25
token 112 :LPAR    (     at line 25
token 113 :STRING  " SWAP y = " at line 25
token 114 :COMMA   ,     at line 25
token 115 :ID      y     at line 25
token 116 :RPAR    )     at line 25
token 117 :SEMI    ;     at line 25
token 118 :RBRA    }     at line 26
token 119 :VOID    void  at line 29
token 120 :ID      complete_num at line 29
token 121 :LPAR    (     at line 29
token 122 :INT     int   at line 29
token 123 :ID      val   at line 29
token 124 :RPAR    )     at line 29
token 125 :LBRA    {     at line 30
token 126 :INT     int   at line 31
token 127 :ID      k     at line 31
token 128 :LBRK    [     at line 31
token 129 :NUM     128   at line 31
token 130 :RBRK    ]     at line 31
token 131 :SEMI    ;     at line 31
token 132 :INT     int   at line 32
token 133 :ID      i     at line 32
token 134 :COMMA   ,     at line 32
token 135 :ID      j     at line 32
token 136 :COMMA   ,     at line 32
token 137 :ID      n     at line 32
token 138 :COMMA   ,     at line 32
token 139 :ID      s     at line 32
token 140 :COMMA   ,     at line 32
token 141 :ID      x1    at line 32
token 142 :SEMI    ;     at line 32
token 143 :INT     int   at line 33
token 144 :ID      m     at line 33
token 145 :COMMA   ,     at line 33
token 146 :ID      k2    at line 33
token 147 :COMMA   ,     at line 33
token 148 :ID      h     at line 33
token 149 :COMMA   ,     at line 33
token 150 :ID      leap  at line 33
token 151 :COMMA   ,     at line 33
token 152 :ID      x2    at line 33
token 153 :SEMI    ;     at line 33
token 154 :INT     int   at line 34
token 155 :ID      a     at line 34
token 156 :COMMA   ,     at line 34
token 157 :ID      b     at line 34
token 158 :COMMA   ,     at line 34
token 159 :ID      c     at line 34
token 160 :SEMI    ;     at line 34
token 161 :ID      j     at line 36
token 162 :EQU     =     at line 36
token 163 :ID      val   at line 36
token 164 :SEMI    ;     at line 36
token 165 :DO      do    at line 37
token 166 :LBRA    {     at line 38
token 167 :ID      n     at line 39
token 168 :EQU     =     at line 39
token 169 :MINUS   -     at line 39
token 170 :NUM     1     at line 39
token 171 :SEMI    ;     at line 39
token 172 :ID      s     at line 40
token 173 :EQU     =     at line 40
token 174 :ID      j     at line 40
token 175 :SEMI    ;     at line 40
token 176 :ID      i     at line 41
token 177 :EQU     =     at line 41
token 178 :NUM     1     at line 41
token 179 :SEMI    ;     at line 41
token 180 :DO      do    at line 42
token 181 :LBRA    {     at line 43
token 182 :ID      x1    at line 44
token 183 :EQU     =     at line 44
token 184 :LPAR    (     at line 44
token 185 :ID      j     at line 44
token 186 :DIV     /     at line 44
token 187 :ID      i     at line 44
token 188 :RPAR    )     at line 44
token 189 :MULT    *     at line 44
token 190 :ID      i     at line 44
token 191 :SEMI    ;     at line 44
token 192 :IF      if    at line 45
token 193 :LPAR    (     at line 45
token 194 :ID      mod   at line 45
token 195 :LPAR    (     at line 45
token 196 :ID      j     at line 45
token 197 :COMMA   ,     at line 45
token 198 :ID      i     at line 45
token 199 :RPAR    )     at line 45
token 200 :EQEQ    ==    at line 45
token 201 :NUM     0     at line 45
token 202 :RPAR    )     at line 45
token 203 :LBRA    {     at line 46
token 204 :ID      n     at line 47
token 205 :EQU     =     at line 47
token 206 :ID      n     at line 47
token 207 :PLUS    +     at line 47
token 208 :NUM     1     at line 47
token 209 :SEMI    ;     at line 47
token 210 :ID      s     at line 48
token 211 :EQU     =     at line 48
token 212 :ID      s     at line 48
token 213 :MINUS   -     at line 48
token 214 :ID      i     at line 48
token 215 :SEMI    ;     at line 48
token 216 :IF      if    at line 49
token 217 :LPAR    (     at line 49
token 218 :ID      n     at line 49
token 219 :GEQ     >=    at line 49
token 220 :NUM     128   at line 49
token 221 :RPAR    )     at line 49
token 222 :PRINTF  printf at line 50
token 223 :LPAR    (     at line 50
token 224 :STRING  " OVERFLOW!          " at line 50
token 225 :RPAR    )     at line 50
token 226 :SEMI    ;     at line 50
token 227 :ELSE    else  at line 51
token 228 :ID      k     at line 52
token 229 :LBRK    [     at line 52
token 230 :ID      n     at line 52
token 231 :RBRK    ]     at line 52
token 232 :EQU     =     at line 52
token 233 :ID      i     at line 52
token 234 :SEMI    ;     at line 52
token 235 :RBRA    }     at line 53
token 236 :ELSE    else  at line 54
token 237 :SEMI    ;     at line 55
token 238 :ID      i     at line 56
token 239 :EQU     =     at line 56
token 240 :ID      i     at line 56
token 241 :PLUS    +     at line 56
token 242 :NUM     1     at line 56
token 243 :SEMI    ;     at line 56
token 244 :RBRA    }     at line 57
token 245 :WHILE   while at line 57
token 246 :LPAR    (     at line 57
token 247 :ID      i     at line 57
token 248 :LSS     <     at line 57
token 249 :ID      j     at line 57
token 250 :RPAR    )     at line 57
token 251 :IF      if    at line 59
token 252 :LPAR    (     at line 59
token 253 :ID      s     at line 59
token 254 :EQEQ    ==    at line 59
token 255 :NUM     0     at line 59
token 256 :RPAR    )     at line 59
token 257 :LBRA    {     at line 60
token 258 :PRINTF  printf at line 61
token 259 :LPAR    (     at line 61
token 260 :STRING  " complete number: " at line 61
token 261 :COMMA   ,     at line 61
token 262 :ID      j     at line 61
token 263 :RPAR    )     at line 61
token 264 :SEMI    ;     at line 61
token 265 :ID      i     at line 62
token 266 :EQU     =     at line 62
token 267 :NUM     0     at line 62
token 268 :SEMI    ;     at line 62
token 269 :DO      do    at line 63
token 270 :LBRA    {     at line 64
token 271 :PRINTF  printf at line 65
token 272 :LPAR    (     at line 65
token 273 :STRING  "  " at line 65
token 274 :COMMA   ,     at line 65
token 275 :ID      k     at line 65
token 276 :LBRK    [     at line 65
token 277 :ID      i     at line 65
token 278 :RBRK    ]     at line 65
token 279 :RPAR    )     at line 65
token 280 :SEMI    ;     at line 65
token 281 :ID      i     at line 66
token 282 :EQU     =     at line 66
token 283 :ID      i     at line 66
token 284 :PLUS    +     at line 66
token 285 :NUM     1     at line 66
token 286 :SEMI    ;     at line 66
token 287 :RBRA    }     at line 67
token 288 :WHILE   while at line 67
token 289 :LPAR    (     at line 67
token 290 :ID      i     at line 67
token 291 :LEQ     <=    at line 67
token 292 :ID      n     at line 67
token 293 :RPAR    )     at line 67
token 294 :PRINTF  printf at line 68
token 295 :LPAR    (     at line 68
token 296 :STRING  "          " at line 68
token 297 :RPAR    )     at line 68
token 298 :SEMI    ;     at line 68
token 299 :RBRA    }     at line 69
token 300 :ELSE    else  at line 70
token 301 :SEMI    ;     at line 71
token 302 :ID      j     at line 72
token 303 :EQU     =     at line 72
token 304 :ID      j     at line 72
token 305 :PLUS    +     at line 72
token 306 :NUM     1     at line 72
token 307 :SEMI    ;     at line 72
token 308 :RBRA    }     at line 73
token 309 :WHILE   while at line 73
token 310 :LPAR    (     at line 73
token 311 :ID      j     at line 73
token 312 :LSS     <     at line 73
token 313 :ID      max_num at line 73
token 314 :RPAR    )     at line 73
token 315 :PRINTF  printf at line 75
token 316 :LPAR    (     at line 75
token 317 :STRING  " ---------------------------------------------------------------          " at line 75
token 318 :RPAR    )     at line 75
token 319 :SEMI    ;     at line 75
token 320 :ID      a     at line 76
token 321 :EQU     =     at line 76
token 322 :NUM     0     at line 76
token 323 :SEMI    ;     at line 76
token 324 :ID      i     at line 77
token 325 :EQU     =     at line 77
token 326 :NUM     0     at line 77
token 327 :SEMI    ;     at line 77
token 328 :DO      do    at line 78
token 329 :LBRA    {     at line 78
token 330 :ID      b     at line 79
token 331 :EQU     =     at line 79
token 332 :ID      a     at line 79
token 333 :MULT    *     at line 79
token 334 :ID      i     at line 79
token 335 :SEMI    ;     at line 79
token 336 :ID      c     at line 80
token 337 :EQU     =     at line 80
token 338 :ID      j     at line 80
token 339 :MULT    *     at line 80
token 340 :ID      n     at line 80
token 341 :SEMI    ;     at line 80
token 342 :ID      a     at line 81
token 343 :EQU     =     at line 81
token 344 :ID      a     at line 81
token 345 :MULT    *     at line 81
token 346 :ID      i     at line 81
token 347 :SEMI    ;     at line 81
token 348 :ID      a     at line 82
token 349 :EQU     =     at line 82
token 350 :ID      a     at line 82
token 351 :PLUS    +     at line 82
token 352 :ID      b     at line 82
token 353 :PLUS    +     at line 82
token 354 :ID      c     at line 82
token 355 :SEMI    ;     at line 82
token 356 :ID      i     at line 83
token 357 :EQU     =     at line 83
token 358 :ID      i     at line 83
token 359 :PLUS    +     at line 83
token 360 :NUM     1     at line 83
token 361 :SEMI    ;     at line 83
token 362 :RBRA    }     at line 84
token 363 :WHILE   while at line 84
token 364 :LPAR    (     at line 84
token 365 :ID      i     at line 84
token 366 :LSS     <     at line 84
token 367 :ID      max_num at line 84
token 368 :RPAR    )     at line 84
token 369 :ID      b     at line 86
token 370 :EQU     =     at line 86
token 371 :ID      a     at line 86
token 372 :SEMI    ;     at line 86
token 373 :ID      i     at line 87
token 374 :EQU     =     at line 87
token 375 :NUM     0     at line 87
token 376 :SEMI    ;     at line 87
token 377 :DO      do    at line 88
token 378 :LBRA    {     at line 88
token 379 :ID      b     at line 89
token 380 :EQU     =     at line 89
token 381 :ID      b     at line 89
token 382 :PLUS    +     at line 89
token 383 :ID      i     at line 89
token 384 :SEMI    ;     at line 89
token 385 :ID      i     at line 90
token 386 :EQU     =     at line 90
token 387 :ID      i     at line 90
token 388 :PLUS    +     at line 90
token 389 :NUM     1     at line 90
token 390 :SEMI    ;     at line 90
token 391 :RBRA    }     at line 91
token 392 :WHILE   while at line 91
token 393 :LPAR    (     at line 91
token 394 :ID      i     at line 91
token 395 :LSS     <     at line 91
token 396 :ID      max_num at line 91
token 397 :RPAR    )     at line 91
token 398 :PRINTF  printf at line 93
token 399 :LPAR    (     at line 93
token 400 :STRING  " b = " at line 93
token 401 :COMMA   ,     at line 93
token 402 :ID      b     at line 93
token 403 :RPAR    )     at line 93
token 404 :SEMI    ;     at line 93
token 405 :PRINTF  printf at line 97
token 406 :LPAR    (     at line 97
token 407 :STRING  " ---------------------------------------------------------------          " at line 97
token 408 :RPAR    )     at line 97
token 409 :SEMI    ;     at line 97
token 410 :ID      h     at line 98
token 411 :EQU     =     at line 98
token 412 :NUM     0     at line 98
token 413 :SEMI    ;     at line 98
token 414 :ID      leap  at line 99
token 415 :EQU     =     at line 99
token 416 :NUM     1     at line 99
token 417 :SEMI    ;     at line 99
token 418 :ID      m     at line 100
token 419 :EQU     =     at line 100
token 420 :NUM     2     at line 100
token 421 :SEMI    ;     at line 100
token 422 :DO      do    at line 101
token 423 :LBRA    {     at line 102
token 424 :ID      k2    at line 103
token 425 :EQU     =     at line 103
token 426 :ID      m     at line 103
token 427 :DIV     /     at line 103
token 428 :NUM     2     at line 103
token 429 :SEMI    ;     at line 103
token 430 :ID      i     at line 104
token 431 :EQU     =     at line 104
token 432 :NUM     2     at line 104
token 433 :SEMI    ;     at line 104
token 434 :DO      do    at line 105
token 435 :LBRA    {     at line 105
token 436 :ID      x2    at line 106
token 437 :EQU     =     at line 106
token 438 :LPAR    (     at line 106
token 439 :ID      m     at line 106
token 440 :DIV     /     at line 106
token 441 :ID      i     at line 106
token 442 :RPAR    )     at line 106
token 443 :MULT    *     at line 106
token 444 :ID      i     at line 106
token 445 :SEMI    ;     at line 106
token 446 :IF      if    at line 107
token 447 :LPAR    (     at line 107
token 448 :ID      mod   at line 107
token 449 :LPAR    (     at line 107
token 450 :ID      m     at line 107
token 451 :COMMA   ,     at line 107
token 452 :ID      i     at line 107
token 453 :RPAR    )     at line 107
token 454 :EQEQ    ==    at line 107
token 455 :NUM     0     at line 107
token 456 :RPAR    )     at line 107
token 457 :LBRA    {     at line 108
token 458 :ID      leap  at line 109
token 459 :EQU     =     at line 109
token 460 :NUM     0     at line 109
token 461 :SEMI    ;     at line 109
token 462 :RBRA    }     at line 110
token 463 :ELSE    else  at line 111
token 464 :SEMI    ;     at line 112
token 465 :ID      i     at line 113
token 466 :EQU     =     at line 113
token 467 :ID      i     at line 113
token 468 :PLUS    +     at line 113
token 469 :NUM     1     at line 113
token 470 :SEMI    ;     at line 113
token 471 :RBRA    }     at line 114
token 472 :WHILE   while at line 114
token 473 :LPAR    (     at line 114
token 474 :ID      i     at line 114
token 475 :LEQ     <=    at line 114
token 476 :ID      k2    at line 114
token 477 :RPAR    )     at line 114
token 478 :IF      if    at line 115
token 479 :LPAR    (     at line 115
token 480 :ID      leap  at line 115
token 481 :EQEQ    ==    at line 115
token 482 :NUM     1     at line 115
token 483 :RPAR    )     at line 115
token 484 :LBRA    {     at line 116
token 485 :PRINTF  printf at line 117
token 486 :LPAR    (     at line 117
token 487 :STRING  " " at line 117
token 488 :COMMA   ,     at line 117
token 489 :ID      m     at line 117
token 490 :RPAR    )     at line 117
token 491 :SEMI    ;     at line 117
token 492 :ID      h     at line 118
token 493 :EQU     =     at line 118
token 494 :ID      h     at line 118
token 495 :PLUS    +     at line 118
token 496 :NUM     1     at line 118
token 497 :SEMI    ;     at line 118
token 498 :ID      x2    at line 120
token 499 :EQU     =     at line 120
token 500 :LPAR    (     at line 120
token 501 :ID      h     at line 120
token 502 :DIV     /     at line 120
token 503 :NUM     10    at line 120
token 504 :RPAR    )     at line 120
token 505 :MULT    *     at line 120
token 506 :NUM     10    at line 120
token 507 :SEMI    ;     at line 120
token 508 :IF      if    at line 121
token 509 :LPAR    (     at line 121
token 510 :ID      x2    at line 121
token 511 :EQEQ    ==    at line 121
token 512 :ID      h     at line 121
token 513 :RPAR    )     at line 121
token 514 :PRINTF  printf at line 122
token 515 :LPAR    (     at line 122
token 516 :STRING  "          " at line 122
token 517 :RPAR    )     at line 122
token 518 :SEMI    ;     at line 122
token 519 :ELSE    else  at line 123
token 520 :SEMI    ;     at line 124
token 521 :RBRA    }     at line 125
token 522 :ELSE    else  at line 126
token 523 :SEMI    ;     at line 127
token 524 :ID      leap  at line 128
token 525 :EQU     =     at line 128
token 526 :NUM     1     at line 128
token 527 :SEMI    ;     at line 128
token 528 :ID      m     at line 129
token 529 :EQU     =     at line 129
token 530 :ID      m     at line 129
token 531 :PLUS    +     at line 129
token 532 :NUM     1     at line 129
token 533 :SEMI    ;     at line 129
token 534 :RBRA    }     at line 130
token 535 :WHILE   while at line 130
token 536 :LPAR    (     at line 130
token 537 :ID      m     at line 130
token 538 :LEQ     <=    at line 130
token 539 :ID      max_num at line 130
token 540 :RPAR    )     at line 130
token 541 :PRINTF  printf at line 132
token 542 :LPAR    (     at line 132
token 543 :STRING  "          The total is " at line 132
token 544 :COMMA   ,     at line 132
token 545 :ID      h     at line 132
token 546 :RPAR    )     at line 132
token 547 :SEMI    ;     at line 132
token 548 :RBRA    }     at line 134
token 549 :VOID    void  at line 137
token 550 :MAIN    main  at line 137
token 551 :LPAR    (     at line 137
token 552 :RPAR    )     at line 137
token 553 :LBRA    {     at line 138
token 554 :INT     int   at line 139
token 555 :ID      n     at line 139
token 556 :SEMI    ;     at line 139
token 557 :ID      n     at line 141
token 558 :EQU     =     at line 141
token 559 :ID      factorial at line 141
token 560 :LPAR    (     at line 141
token 561 :NUM     10    at line 141
token 562 :RPAR    )     at line 141
token 563 :SEMI    ;     at line 141
token 564 :PRINTF  printf at line 142
token 565 :LPAR    (     at line 142
token 566 :STRING  " 10! = " at line 142
token 567 :COMMA   ,     at line 142
token 568 :ID      n     at line 142
token 569 :RPAR    )     at line 142
token 570 :SEMI    ;     at line 142
token 571 :ID      swap  at line 144
token 572 :LPAR    (     at line 144
token 573 :NUM     5     at line 144
token 574 :COMMA   ,     at line 144
token 575 :NUM     10    at line 144
token 576 :RPAR    )     at line 144
token 577 :SEMI    ;     at line 144
token 578 :ID      complete_num at line 146
token 579 :LPAR    (     at line 146
token 580 :NUM     2     at line 146
token 581 :RPAR    )     at line 146
token 582 :SEMI    ;     at line 146
token 583 :RBRA    }     at line 147
